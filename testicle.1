.TH testicle 1 "MAR 2007" "Testicle" "User Manuals"
.
.
.SH "NAME"
testicle \- build C++ unit tests
.
.
.SH "SYNOPSIS"
.B testicle
.RB [ \-o
.IR outfile ]
.RB [ --tests = \fIpattern ]
.RB [ \-e ]
.I infile
\&...
.br
.B testicle
.B --help
.br
.B testicle
.B --version
.
.
.SH "DESCRIPTION"
.B testicle
generates an executable test program from one or more object files
containing test functions, referred to here under the popular name
.IR "unit tests" .
.PP
It works by invoking
.B make
to compile or link, by invoking
.B nm
to find symbols likely to be tests in object files,
and by generating the C++ source for the test executive
and command-line interface.
.
.
.SH "TEST FUNCTIONS"
.
Test functions must have the signature
.IP
\fIvoid test...();\fP
.PP
There is no requirement to group them into classes.
In fact, there is no direct support for doing so.
.PP
Executing one results in one out of three things:
.IP \fB\s-2PASS\s0
the function returns normally
.IP \fB\s-2FAIL\s0
the function throws a
.B TesticleAssertionError
exception.
.IP \fB\s-2ERROR\s0
the function throws any other exception.
.PP
Some utility functions for throwing
.B TesticleAssertionError
are available in
.BR testicle.h .
.
.
.SH "BUILDING"
.B testicle
invokes
.IP
\fBmake\fP \fIinfile infile\fP ...
.PP
to (re)generate its input files.
It is up to the user to configure her environment to make this happen,
typically by writing suitable rules in her
.BR Makefile .
.PP
Similarly, the executable test is created by invoking
.IP
\fBmake test\fP
.PP
unless the
.B \-o
option has been used to rename it.
.
.
.SH "THE TEST PROGRAM"
The executable test program generated by
.B testicle
has the synopsis
.PP
.B ./test
.RB [ \-v ]
.RI [ pattern
\&...]
.br
.B ./test
.B \-l
.PP
The first form executes all tests or all tests matching the given pattern(s),
and returns with a zero exit status if all of them pass.
By default, a brief progress indication and a summary
are printed to standard error. The
.B \-v
option makes the progress more verbose.
.PP
The second form simply lists all tests without executing them.
.
.
.SH "OPTIONS"
.
.
.IP \-o\ \fIoutfile
Name the executable test program.
If not provided, it will be named, simply,
.BR test .
.
.
.IP --tests=\fIpattern
Assume symbols matching the Perl-compatible regular expression
.I pattern
are unit tests, instead of any function whose name starts with
.BR test .
.
.IP \-e
Execute the test program after building it.
.
.
.IP --help
Print the usage message and exit.
.
.
.IP --version
Print version information and exit.
.
.
.SH "EXIT STATUS"
.B 0
if and only if the test program is built correctly.
If the
.B \-e
option was given, it returns whatever the test program returns.
.
.
.SH "AUTHOR"
J\(:orgen Grahn
.I \[fo]grahn+src@snipabacken.dyndns.org\[fc]
.
.
.SH "SEE ALSO"
.BR make (1),
.BR nm (1).
