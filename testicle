#!/usr/bin/env python
# -*- coding: iso-8859-1 -*-
#
# Copyright (c) 2007, 2008, 2011, 2013 Jörgen Grahn.
# All rights reserved.
#
"""build C++ unit tests
"""
import os
import re


class Vanilla(object):
    "A vanilla test case: foo(testicle::TC)."
    def __init__(self, name):
        self.name = name

    def prototype(self, f, indent):
        """Generate the prototype, assuming we're in the
        right space already.
        """
        f.write("%svoid %s(testicle::TC);\n" % (indent, self.name))

    def proxy(self, f, indent):
        """Generate the proxy, assuming we're in the
        right space already. Vanilla test cases don't
        need proxying.
        """
        pass

class Legacy(object):
    "A legacy test case: foo()."
    def __init__(self, name):
        self.name = name

    def prototype(self, f, indent):
        f.write("%svoid %s();\n" % (indent, self.name))

    def proxy(self, f, indent):
        w = f.write
        w("%sstatic void %s(testicle::TC) {\n" % (indent, self.name))
        w("%s    %s();\n" % (indent, self.name))
        w("%s}\n" % indent)

class Namespace(object):
    """A C++ namespace for our purposes: a set of test functions and
    other namespaces.
    """
    def __init__(self, name = None):
        self.name = name
        self._ns = []
        self._tc = []

    def empty(self):
        return not self._tc and not self._ns

    def add(self, ns):
        """Find or create the namespace 'ns' and return it.  'ns' is
        a sequence, e.g. [] for the global namespace or ['foo', 'bar']
        for foo::bar.
        """
        n = self
        for s in ns:
            nn = [ x for x in n._ns if x.name == s ]
            if nn:
                n, = nn
            else:
                n._ns.append(Namespace(s))
                n = n._ns[-1]
        return n

    def append(self, tc):
        """Append test case 'tc' to this namespace (not a
        sub-namespace).
        """
        self._tc.append(tc)

    def prototypes(self, f, indent = ""):
        """Write the function prototypes to 'f'.
        """
        for tc in self._tc:
            tc.prototype(f, indent)
        w = f.write
        for ns in self._ns:
            w("%snamespace %s {\n" % (indent, ns.name))
            ns.prototypes(f, indent + 4*" ")
            w("%s}\n" % indent)

    def proxies(self, f, indent = ""):
        """Write proxies (for the tests which need them) to 'f'.
        """
        for tc in self._tc:
            tc.proxy(f, indent)
        w = f.write
        for ns in self._ns:
            w("%snamespace %s {\n" % (indent, ns.name))
            ns.proxies(f, indent + 4*" ")
            w("%s}\n" % indent)

    def array(self, f, prefix = []):
        """Write the tests as an array of tuples
        { "name", name }.
        """
        for tc in self._tc:
            ss = prefix[:]
            ss.append(tc.name)
            s = '::'.join(ss)
            f.write('%8s{ "%s", %s },\n' % ('', s, s))
        for ns in self._ns:
            ss = prefix[:]
            ss.append(ns.name)
            ns.array(f, ss)

def matches(res, s):
    for re in res:
        if re.match(s): return True
    return False

def find_tests(infiles, testres):
    """Find and return all symbols foo(args) matching
    - something(testicle::TC)
    - any of the REs 'testres'
    in object files 'infiles'.  Returned as a Namespace, i.e.
    a tree with test cases sprinkled here and there.
    """
    vanillare = re.compile(r'([\w:]+)\(testicle::TC\)$')
    legacyre = re.compile(r'([\w:]+)\((?:void)?\)$')
    f = os.popen('nm -CP %s' % ' '.join(['"%s"' % s for s in infiles]))
    top = Namespace()
    for s in f.xreadlines():
        ss = s.split()
        if len(ss)<2 or ss[1]!='T':
            continue
        tc = ss[0]
        m = vanillare.match(tc)
        if m:
            tc = m.group(1)
            tc = tc.split('::')
            ns = top.add(tc[:-1])
            ns.append(Vanilla(tc[-1]))
            continue
        m = legacyre.match(tc)
        if m:
            tc = m.group(1)
            if matches(testres, tc):
                tc = tc.split('::')
                ns = top.add(tc[:-1])
                ns.append(Legacy(tc[-1]))
            continue
    rc = f.close()
    return top

def progress(f):
    "Write class Progress to 'f'."
    w = f.write
    w(r"""
namespace {

    class Progress {
    public:
        Progress(std::ostream& os, bool verbose, int indent)
	    : os_(os),
	      verbose_(verbose),
              indent_(indent),
	      pass_(0),
	      fail_(0),
	      error_(0)
	{}

	void begin(const char * name);
	void pass();
	void fail(const testicle::Failure& failure);
	void error();
	void done();
	int rc() const { return fail_+error_!=0; }

    private:
	struct Problem {
	    Problem(const std::string& name,
		    const testicle::Failure& failure)
		: name(name),
		  failure(failure)
	    {}
	    std::string name;
	    testicle::Failure failure;
	};

	std::ostream& os_;
	const bool verbose_;
        const int indent_;
	int pass_;
	int fail_;
	int error_;
	std::string current_;
	std::vector<Problem> problems_;
	std::vector<std::string> errors_;
    };

    void Progress::begin(const char * name)
    {
	current_ = name;
	if(verbose_) {
           os_ << name
               << std::string(indent_ - std::strlen(name), ' ')
               << std::flush;
	}
    }

    void Progress::pass()
    {
	pass_++;
	if(verbose_) {
	    os_ << "ok" << std::endl;
	}
	else {
	    os_ << '.' << std::flush;
	}
    }

    void Progress::fail(const testicle::Failure& failure)
    {
	fail_++;
	if(verbose_) {
	    os_ << "FAIL" << std::endl;
	}
	else {
	    os_ << 'F' << std::flush;
	}

	problems_.push_back(Problem(current_, failure));
    }

    void Progress::error()
    {
	error_++;
	if(verbose_) {
	    os_ << "ERROR" << std::endl;
	}
	else {
	    os_ << 'E' << std::flush;
	}

	errors_.push_back(current_);
    }

    void Progress::done()
    {
	static const char hr[] = "----------------------------------------"
	                         "------------------------------\n";

	if(!verbose_) {
	    os_ << '\n';
	}
	os_ << hr;

	for(std::vector<Problem>::const_iterator i = problems_.begin();
	    i != problems_.end();
	    ++i) {
	    os_ << i->name << '\n'
		<< i->failure << '\n'
		<< hr;
	}

	for(std::vector<std::string>::const_iterator i = errors_.begin();
	    i != errors_.end();
	    ++i) {
	    os_ << *i << '\n'
		<< "Error." << '\n'
		<< hr;
	}

	if(fail_+error_ == 0) {
	    os_ << "OK (" << pass_ << " tests)\n";
	}
	else {
	    int total = pass_ + fail_ + error_;
	    os_ << "FAILED (" << total << " tests; "
		<< fail_ << " fail, "
		<< error_ <<" error)\n";
	}
    }
}

""")

def source(ns, f):
    """Generate main test program source to file-like object 'f',
    for the test functions collected in Namespace 'ns'.
    """
    w = f.write
    w(r"""#include <iostream>
#include <algorithm>
#include <vector>
#include <cstring>
#include <string>
#include <unistd.h>

#include <testicle.h>

/* prototypes for the tests */
""")

    ns.prototypes(f)
    w("""
/* proxies for the tests */
""")
    ns.proxies(f)

    progress(f)

    w(r"""namespace {

    struct Entry {
	const char * name;
	void (*f)(testicle::TC);
    };


    class NonMatch {
    public:
	NonMatch(char ** begin, char ** end)
	    : begin_(begin),
	      end_(end)
	{}

	bool operator() (const Entry& e) const;

    private:
	char ** const begin_;
	char ** const end_;
    };

    bool NonMatch::operator() (const Entry& e) const
    {
	char ** i = begin_;
	while(i!=end_) {
	    if(std::strstr(e.name, *i)==e.name) return false;
	    ++i;
	}
	return true;
    }
}


int main(int argc, char ** argv)
{
    const char * const prog = argv[0];

    static const Entry entries[] = {
""")

    ns.array(f)

    w(r"""    };

    static const size_t NENTRIES = sizeof(entries)/sizeof(entries[0]);

    bool verbose = false;
    size_t indentation = 0;
    bool just_list = false;
    bool bork_on_fail = false;

    int ch;
    while((ch = getopt(argc, argv, "vlc")) != -1) {
	switch(ch) {
	case 'v':
	    verbose = true;
            for(size_t i=0; i<NENTRIES; ++i) {
                indentation = std::max(indentation,
                                       std::strlen(entries[i].name) + 1);
            }
	    break;
	case 'l':
	    just_list = true;
	    break;
	case 'c':
	    bork_on_fail = true;
	    break;
	case '?':
	default:
	    std::cerr << "usage: " << prog << " [-vc] [pattern ...]\n"
		      << "       " << prog << " -l [pattern ...]\n";
	    return 0;
	}
    }

    std::vector<Entry> chosen(entries, entries+NENTRIES);
    if(optind!=argc) {
	chosen.erase(std::remove_if(chosen.begin(), chosen.end(),
				    NonMatch(argv+optind, argv+argc)),
		     chosen.end());
    }

    if(just_list) {
	for(std::vector<Entry>::const_iterator i = chosen.begin();
	    i!=chosen.end();
	    ++i) {
	    std::cout << i->name << '\n';
	}
	return 0;
    }

    Progress p(std::cout, verbose, indentation);
    const testicle::TC dummy;

    for(std::vector<Entry>::const_iterator i = chosen.begin();
	i!=chosen.end();
	++i) {

	const Entry& e = *i;

	p.begin(e.name);

	if(bork_on_fail) {
	    e.f(dummy);
	    p.pass();
	}
	else {
	    try {
		e.f(dummy);
		p.pass();
	    }
	    catch(testicle::Failure& failure) {
		p.fail(failure);
	    }
	    catch(...) {
		p.error();
	    }
	}
    }
    p.done();

    return p.rc();
}
""")


if __name__ == "__main__":
    import sys
    import getopt

    prog = os.path.split(sys.argv[0])[1]
    usage = ('usage: %(prog)s [-o outfile] [--tests=pattern] ... infile ...\n'
             '       %(prog)s --help\n'
             '       %(prog)s --version') % locals()
    outfile = 'test.cc'
    testres = []

    try:
        opts, infiles = getopt.getopt(sys.argv[1:], 'o:',
                                    ['tests=', 'version', 'help'])
        for opt, value in opts:
            if opt=='-o':
                outfile = value
            elif opt=='--tests':
                testres.append(re.compile(value))
            elif opt=='--version':
                print prog
                print "testicle 1.8"
                print "Copyright (c) 2007, 2008, 2011, 2013, 2014 Jörgen Grahn."
                print "All rights reserved."
                sys.exit(0)
            elif opt=='--help':
                print usage
                sys.exit(0)
        if not infiles:
            raise ValueError('no input file specified')
    except (getopt.GetoptError, ValueError, re.error), s:
        print >>sys.stderr, s
        print >>sys.stderr, usage
        sys.exit(1)

    if not testres:
        testres.append(re.compile(r'^(.+::)?test\w*$'))

    top = find_tests(infiles, testres)

    of = open(outfile, 'w')
    source(top, of)
    of.close()

    sys.exit(0)
